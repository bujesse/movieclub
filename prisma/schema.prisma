generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// A list of movies created by a user
model MovieList {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdBy   String
  movies      Movie[]
  votes       Vote[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Meetup      Meetup?

  @@index([createdBy])
  @@index([createdAt])
}

// Individual movies in a list
model Movie {
  id          Int       @id @default(autoincrement())
  movieList   MovieList @relation(fields: [movieListId], references: [id], onDelete: Cascade)
  movieListId Int

  // TMDb identity
  tmdbId Int

  // Titles & language
  title            String
  originalTitle    String?
  originalLanguage String? // keep plain for SQLite

  // Dates & details
  releaseDate DateTime?
  overview    String?
  voteAverage Float?
  voteCount   Int?

  // Media paths (raw TMDb paths, not full URLs)
  posterPath   String? // e.g. "/abc123.jpg"
  backdropPath String?

  // Genres (JSON array of ints: [28, 12, ...])
  genres Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Allow same TMDb movie in different lists, but only once per list
  @@unique([movieListId, tmdbId])
  // Handy indexes
  @@index([tmdbId])
  @@index([title])
  @@index([releaseDate])
}

// Votes on a MovieList
model Vote {
  id          Int       @id @default(autoincrement())
  movieList   MovieList @relation(fields: [movieListId], references: [id], onDelete: Cascade)
  movieListId Int
  userId      String
  value       Int // 1 or -1
  createdAt   DateTime  @default(now())

  // tie each vote to a specific meetup
  meetup   Meetup @relation(fields: [meetupId], references: [id], onDelete: Cascade)
  meetupId Int

  // Prevent multiple votes by same user on a list
  @@unique([movieListId, userId, meetupId])
  @@index([userId, meetupId])
}

model Meetup {
  id   Int       @id @default(autoincrement()) // singleton row
  date DateTime? // stored in UTC;

  movieList   MovieList? @relation(fields: [movieListId], references: [id])
  movieListId Int?       @unique
  Vote        Vote[]
}

model Seen {
  userId   String
  tmdbId   Int

  firstSeenAt DateTime @default(now())
  lastSeenAt  DateTime @default(now()) @updatedAt

  @@id([userId, tmdbId])
  @@index([tmdbId])
  @@index([userId])
}
